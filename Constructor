// Constructor: It is a special method which is invoked acuto
//matically at the time of object creation.
 // 1. Default 
 // 2. Parameterzied
 // 3.Copy
 // 4. Constructor Overloading

// 1. Default : a default cons with no parameter or with 
//default
//  values for all paremeters.
 
#include <iostream>
using namespace std;

class MyClass {
    
    // default constructor 
    public:
    MyClass() {
        cout << "Default constructor called ." << endl;
    }
};
int main() {
    MyClass obj;
    return 0;
}

// 2.Paremeterized Constructor : it allow to initize object
// data member with specified values during object creation.

#include <iostream>
using namespace std;

class Rectangle {
    
    public:
    int length;
    int width;
    
    public:
    Rectangle(int l,int w) { // parameterized 
        length = l;
        width = w;
    }
    void display() {
        cout<< "Area of rectangle " << length * width << endl;
    }
};
int main() {
    Rectangle obj(5,3);
    obj.display();
    return 0;
}
// 3.copy constructor: it is a constructor that initilizes an
// objects by coping the values another objects of the same
// class. It is called when new objects is created from an ex
// isting object.
#include <iostream>

using namespace std;

class MyClass {
    private:
      int data;
      
    public:
    MyClass(int d) {
        data = d;
    }
    MyClass(const MyClass &obj) {
        cout<< "Copy constructor called" <<endl;
        data = obj.data;
    }
    void display() {
        cout<< "Data : "<< data << endl;
    }
};
int main() {
   MyClass obj1(10);
   MyClass obj2 = obj1; // copy const called 
   obj1.display();
   return 0;
}
// 4.Constructor Overloading:Having multiple constructor in a
// class with diffrent parameter lists.it allows you to create
// objects in diffrent ways based on the arguments.
#include <iostream>

using namespace std;

class Rectangle {
    private:
        int length;
        int width;
        
    public:
    Rectangle() {
        length = 0;
        width = 0;
        cout<< "Default constructor is called " << endl;
    }
    Rectangle(int l, int w) {
        length = l;
        width = w;
        cout << " Parameterized constructor called. " << endl;
    }
    Rectangle(const Rectangle &other) {
        length = other.length;
        width = other.length;
        cout<< " Copy constructor called" << endl;
    } 
    void display() {
        cout<< " Length : " << length << " width " << width << endl;
    }
};
int main() {
   Rectangle rec1; // default
   Rectangle rec2(5,3); // parameterized
   Rectangle rec3 = rec2; // copy 
   
   rec1.display();
   rec2.display();
   rec3.display();
   
   return 0;
}
